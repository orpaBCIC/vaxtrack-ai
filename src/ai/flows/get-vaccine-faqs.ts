// src/ai/flows/get-vaccine-faqs.ts
'use server';
/**
 * @fileOverview Generates FAQs for a specific vaccine using an AI model.
 *
 * - getVaccineFaqs - A function that triggers the AI flow to generate FAQs.
 * - GetVaccineFaqsInput - The input type for the getVaccineFaqs function.
 * - GetVaccineFaqsOutput - The return type for the getVaccineFaqs function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GetVaccineFaqsInputSchema = z.object({
  vaccineName: z.string().describe('The common name or official name of the vaccine (e.g., "Hepatitis B vaccine", "MMR vaccine", "DTaP").'),
});
export type GetVaccineFaqsInput = z.infer<typeof GetVaccineFaqsInputSchema>;

const FaqSchema = z.object({
  question: z.string().describe('A frequently asked question about the vaccine.'),
  answer: z.string().describe('A clear, concise, and factual answer to the question, suitable for parents. The answer must be based on generally accepted medical knowledge and should conclude with the disclaimer: "This information is for educational purposes and should not replace consultation with a healthcare professional."'),
});

const GetVaccineFaqsOutputSchema = z.object({
  faqs: z.array(FaqSchema).describe('A list of 3-5 frequently asked questions and their answers regarding the specified vaccine.'),
  lastUpdatedAiFaqs: z.string().describe('Timestamp of when these FAQs were generated by the AI (ISO 8601 format).'),
});
export type GetVaccineFaqsOutput = z.infer<typeof GetVaccineFaqsOutputSchema>;

export async function getVaccineFaqs(input: GetVaccineFaqsInput): Promise<GetVaccineFaqsOutput> {
  const result = await getVaccineFaqsFlow(input);
  // Ensure the result includes the lastUpdatedAiFaqs field.
  // The model is instructed to provide it, but this is a fallback.
  return {
    ...result,
    lastUpdatedAiFaqs: result.lastUpdatedAiFaqs || new Date().toISOString(),
  };
}

const prompt = ai.definePrompt({
  name: 'getVaccineFaqsPrompt',
  input: {schema: GetVaccineFaqsInputSchema},
  output: {schema: GetVaccineFaqsOutputSchema},
  prompt: `You are a highly knowledgeable AI assistant specializing in pediatric health and immunizations, providing information based on current CDC guidelines and reputable medical sources.
A user (likely a parent) is requesting Frequently Asked Questions (FAQs) about the {{{vaccineName}}}.

Please generate 3 to 5 distinct and important FAQs specifically tailored to the {{{vaccineName}}}.
For each FAQ:
1.  Formulate a clear and relevant question that a parent might ask.
2.  Provide a factual, easy-to-understand, and comprehensive answer.
3.  Crucially, each answer MUST end with the exact disclaimer: "This information is for educational purposes and should not replace consultation with a healthcare professional."

Structure your entire response strictly according to the provided output JSON schema, including the 'faqs' array and the 'lastUpdatedAiFaqs' field (current ISO 8601 timestamp).
Do not add any introductory or concluding remarks outside of the JSON structure.
Example topics for FAQs could include safety, side effects, efficacy, number of doses, why it's important, etc., specific to the {{{vaccineName}}}.
`,
  config: {
    // Adjust safety settings if needed, but generally keep them restrictive for medical advice.
    // BLOCK_ONLY_HIGH for dangerous content allows for discussion of medical topics.
    safetySettings: [
      { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_ONLY_HIGH' },
      { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
    ],
  }
});

const getVaccineFaqsFlow = ai.defineFlow(
  {
    name: 'getVaccineFaqsFlow',
    inputSchema: GetVaccineFaqsInputSchema,
    outputSchema: GetVaccineFaqsOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error('AI model did not return a valid response for FAQs.');
    }
    // The prompt asks the model to fill lastUpdatedAiFaqs.
    // If for some reason it's missing from output, this ensures it's added.
    // However, with proper schema definition, the model should ideally provide it.
    return {
        ...output,
        faqs: output.faqs || [], // Ensure faqs is an array even if model fails
        lastUpdatedAiFaqs: output.lastUpdatedAiFaqs || new Date().toISOString(),
    };
  }
);
